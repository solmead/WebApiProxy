<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//------------------------------------------------------------------------------
//<auto-generated>
//  This file is auto-generated by WebApiProxy
//  Project site: http://github.com/faniereynders/webapiproxy
//  
//  Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

module Api {
	//Models <#=this.Metadata.Models.Count()#>
	<# foreach(var model in this.Metadata.Models.ToList()) { #>
		export interface I<#=model.Name#> {
			<# foreach (var param in model.Properties) { #>
				<#=param.Name#>: <#=HandleType(param.Type)#>;
			<# } #> 
		}
	<# } #> 

	
	//Namespaces <#=this.Metadata.Definitions.Count()#>
	<# foreach(var definition in this.Metadata.Definitions) { #>
		namespace <#= definition.Name #> {
			

			<# foreach(var method in definition.ActionMethods) { #>
				<#
					
					var url = ("\"" + method.Url.Replace("{", "\" + ").Replace("}", " + \"") + "\"").Replace(" + \"\"","");
				
					var funcType = HandleType(method.ReturnType);
				#>
				export async function <#= method.Name.ToCamelCasing() #>Async(<#
					var allParameters = method.UrlParameters.AsEnumerable();
					foreach(var param in allParameters) {
							var paramType = HandleType(param.Type);
						#><#=param.Name + (param.IsOptional ? "?" : "") + ": " + paramType#>,
					<# }  #><#
						if (method.BodyParameter != null) {
							var param = method.BodyParameter;
							var bodyType = HandleType(param.Type);
						#><#=param.Name + (param.IsOptional ? "?" : "") + ": " + bodyType#>,<#}
					#> options?: any): Promise<<#= funcType#>>  {
					var defaults = { fields: [] };
					var settings = $.extend({}, defaults, options || {});
					var url = <#= url #>;

					if(settings.fields.length > 0) {
						url +=  url.indexOf("?") == -1 ? "?" : "&";
						url += "fields=" + settings.fields.join();
					}


					<# if (method.UrlParameters.Any()) { #>
						<# foreach (var parameter in method.UrlParameters) { #>
							url = ApiLibrary.addDataToUrl(url, "<#= parameter.Name #>", <any> <#= parameter.Name #>);
						<# } #>
					<# } #>

					<#if (method.Type.ToString().ToLower()=="get") {#>
						return await ApiLibrary.getCallAsync<<#=funcType#>>(url,0);
					<#}#>
					<#if (method.Type.ToString().ToLower()=="post") {#>
						return await ApiLibrary.postCallAsync<<#=funcType#>>(url, 0, <#= method.BodyParameter.Name #>);
					<#}#>
					<#if (method.Type.ToString().ToLower()=="put") {#>
						return await ApiLibrary.putCallAsync<<#=funcType#>>(url, 0, <#= method.BodyParameter.Name #>);
					<#}#>
				}
			<# } #> 
		}
	<# } #> 

}
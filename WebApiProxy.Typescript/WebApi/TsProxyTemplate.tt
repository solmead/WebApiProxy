<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(TargetDir)WebApiProxy.TypeScript.dll" #>
<#@ assembly name="$(TargetDir)WebApiProxy.Core.dll" #>
<#@ assembly name="$(TargetDir)WebApiProxy.Server.dll" #>
<#@ import namespace="WebApiProxy" #>
<#@ import namespace="WebApiProxy.Core" #>
<#@ import namespace="WebApiProxy.TypeScript" #>
<#@ output extension=".ts" #>
<#try {#>
<#
	var metaDataProvider = new MetaDataLocalProvider();
	var Metadata = metaDataProvider.GetMetadata();
#>

//------------------------------------------------------------------------------
//<auto-generated>
//  This file is auto-generated by WebApiProxy
//  Project site: http://github.com/faniereynders/webapiproxy
//  
//  Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

module Api {
	//Models <#=Metadata.Models.Count()#>
	<# foreach(var model in Metadata.Models.ToList()) { 
		if (model.Type!="enum") {#>
		export class <#=model.Name#> {
			<# foreach (var param in model.Properties) { 
				if (Extensions.IsValid(param.Type)) {#>
				<#=param.Name + (Extensions.IsNullable(param.Type) ? "?" : "")#>: <#=Extensions.HandleType(param.Type)#>;
				<# }
				} #> 
				constructor() {
				}
		}
		<# } else { #> 
			export enum <#=model.Name#> {
				<# foreach (var param in model.Properties) { #>
					<#=param.Name#>= <#=param.Description#>,
				<# } #> 
			}
		<# } #>
	<# } #> 

	//Namespaces <#=Metadata.Definitions.Count()#>
	<# foreach(var definition in Metadata.Definitions) { #>
		export namespace <#= definition.Name #> {
			<#
			var methods = Extensions.GetMethods(definition.ActionMethods);
			#>

			<# foreach(var method in methods) { #>
				<#
					
					var url = ("\"" + method.Url.Replace("{", "\" + ").Replace("}", " + \"") + "\"").Replace(" + \"\"","");
				
					var funcType = Extensions.HandleType(method.ReturnType);
					var allParameters = method.UrlParameters.ToList();
				#>
				

				export function get<#= method.Name #>Url(<#
					foreach(var param in allParameters) {
							var paramType = Extensions.HandleType(param.Type);
						#><#=param.Name + (Extensions.IsNullable(param.Type) || (param.IsOptional && Extensions.IsNullable(param.Type)) ? "?" : "") + ": " + paramType + (param.IsOptional && !Extensions.IsNullable(param.Type) ? " = " + Extensions.Default(param.Type) : "")#>,<# }  #><#
						if (method.BodyParameter != null) {
							var param = method.BodyParameter;
							var bodyType = Extensions.HandleType(param.Type);
						#><#=param.Name + (Extensions.IsNullable(param.Type) || (param.IsOptional && Extensions.IsNullable(param.Type)) ? "?" : "") + ": " + bodyType + (param.IsOptional && !Extensions.IsNullable(param.Type) ? " = " + Extensions.Default(param.Type) : "")#>,<#}
					#> options?: any): string  {
					<# foreach(var param in allParameters) { 
							if (!Extensions.IsBaseType(param.Type)) {#>
							<#=param.Name#> = <#=param.Name#> || <<#=Extensions.HandleType(param.Type)#>> {};
							<#
								var model = Extensions.GetModel(param.Type, Metadata);
								foreach (var innerParam in model.Properties) { 
									if (Extensions.IsValid(innerParam.Type)) {#>
										var <#=innerParam.Name#> = (<#=param.Name#>.<#=innerParam.Name#> == null ? "" : <#=param.Name#>.<#=innerParam.Name#> + "");
									<# }
								}
							} else if (param.IsOptional && (Extensions.IsNullable(param.Type) || Extensions.Default(param.Type) == "null")) {#>
								<#=param.Name#> = <<#=Extensions.HandleType(param.Type)#>>(<#=param.Name#> == null ? "" : <#=param.Name#>);
							<# }
						}#>
						var url = <#= url #>;
						var _defaults = { };
						var _settings = $.extend({}, _defaults, options || {});
						for (var key in _settings) {
							if (_settings.hasOwnProperty(key)) {
								url +=  url.indexOf("?") == -1 ? "?" : "&";
								url += key + "=" + _settings[key];
							}
						}
						return url;
					}


				export async function <#= method.Name.ToCamelCasing() #>Async(<#
					foreach(var param in allParameters) {
							var paramType = Extensions.HandleType(param.Type);
						#><#=param.Name + (Extensions.IsNullable(param.Type) || (param.IsOptional && Extensions.IsNullable(param.Type)) ? "?" : "") + ": " + paramType + (param.IsOptional && !Extensions.IsNullable(param.Type) ? " = " + Extensions.Default(param.Type) : "")#>,<# }  #><#
						if (method.BodyParameter != null) {
							var param = method.BodyParameter;
							var bodyType = Extensions.HandleType(param.Type);
						#><#=param.Name + (Extensions.IsNullable(param.Type) || (param.IsOptional && Extensions.IsNullable(param.Type)) ? "?" : "") + ": " + bodyType + (param.IsOptional && !Extensions.IsNullable(param.Type) ? " = " + Extensions.Default(param.Type) : "")#>,<#}#> options?: any): Promise<<#= funcType#>>  {

					var url = get<#= method.Name #>Url(<#
					foreach(var param in allParameters) {#><#=param.Name#>, <# }  #><#
						if (method.BodyParameter != null) {#><#=method.BodyParameter.Name#>,<#}#> options);

						
					var bodyData1 = <#if (method.BodyParameter != null) {#><#=method.BodyParameter.Name#><#} else {#>null<#}#>;

					var bodyData2 = <#if (method.BodyParameter != null) {#>{"":<#=method.BodyParameter.Name#>}<#} else {#>null<#}#>;

					var bodyData3 = <#if (method.BodyParameter != null) {#>{"<#=method.BodyParameter.Name#>":<#=method.BodyParameter.Name#>}<#} else {#>null<#}#>;

					var bodyData = bodyData1;

					<#if (method.Type.ToString().ToLower()=="get") {#>
						return await ApiLibrary.getCallAsync<<#=funcType#>>(url,0);
					<#}#>
					<#if (method.Type.ToString().ToLower()=="post") {#>
						return await ApiLibrary.postCallAsync<<#=funcType#>>(url, 0, bodyData);
					<#}#>
					<#if (method.Type.ToString().ToLower()=="put") {#>
						return await ApiLibrary.putCallAsync<<#=funcType#>>(url, 0, bodyData);
					<#}#>
					<#if (method.Type.ToString().ToLower()=="delete") {#>
						return await ApiLibrary.postCallAsync<<#=funcType#>>(url, 0, bodyData);
					<#}#>
				}
				<#
				var extraName = "";
				if (method.Name.ToCamelCasing() == "delete") {
					extraName = "Item";
				}#>

				export async function <#= method.Name.ToCamelCasing() + extraName #>(<#
					foreach(var param in allParameters) {
							var paramType = Extensions.HandleType(param.Type);
						#><#=param.Name + (Extensions.IsNullable(param.Type) || (param.IsOptional && Extensions.IsNullable(param.Type)) ? "?" : "") + ": " + paramType + (param.IsOptional && !Extensions.IsNullable(param.Type) ? " = " + Extensions.Default(param.Type) : "")#>,<# }  #><#
						if (method.BodyParameter != null) {
							var param = method.BodyParameter;
							var bodyType = Extensions.HandleType(param.Type);
						#><#=param.Name + (Extensions.IsNullable(param.Type) || (param.IsOptional && Extensions.IsNullable(param.Type)) ? "?" : "") + ": " + bodyType + (param.IsOptional && !Extensions.IsNullable(param.Type) ? " = " + Extensions.Default(param.Type) : "")#>,<#}#> options?: any, callback?:(data:<#= funcType#>)=>void): Promise<void>  {

					var url = get<#= method.Name #>Url(<#
					foreach(var param in allParameters) {#><#=param.Name#>, <# }  #><#
						if (method.BodyParameter != null) {#><#=method.BodyParameter.Name#>,<#}#> options);

						
					var bodyData1 = <#if (method.BodyParameter != null) {#><#=method.BodyParameter.Name#><#} else {#>null<#}#>;

					var bodyData2 = <#if (method.BodyParameter != null) {#>{"":<#=method.BodyParameter.Name#>}<#} else {#>null<#}#>;

					var bodyData3 = <#if (method.BodyParameter != null) {#>{"<#=method.BodyParameter.Name#>":<#=method.BodyParameter.Name#>}<#} else {#>null<#}#>;

					var bodyData = bodyData1;

					<#if (method.Type.ToString().ToLower()=="get") {#>
						var data = await ApiLibrary.getCallAsync<<#=funcType#>>(url,0);
					<#}#>
					<#if (method.Type.ToString().ToLower()=="post") {#>
						var data = await ApiLibrary.postCallAsync<<#=funcType#>>(url, 0, bodyData);
					<#}#>
					<#if (method.Type.ToString().ToLower()=="put") {#>
						var data = await ApiLibrary.putCallAsync<<#=funcType#>>(url, 0, bodyData);
					<#}#>
					<#if (method.Type.ToString().ToLower()=="delete") {#>
						var data = await ApiLibrary.postCallAsync<<#=funcType#>>(url, 0, bodyData);
					<#}#>

					if (callback) {
						callback(data);
					}
				}

			<# } #> 
		}
	<# } #> 

}
<#}
catch (Exception ex) {
	var i = 0;
}
#>